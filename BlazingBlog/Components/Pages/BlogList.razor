@rendermode RenderMode.InteractiveServer
@inject IBlogRepository BlogRepository
@inject BlogStateService BlogStateService

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">BlazingBlog</a>
    </div>
</div>

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        @foreach (var post in blogPosts)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="@($"/post/{post.Id}")" Match="NavLinkMatch.All">
                    <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> @post.Title
                </NavLink>
            </div>
        }
        <div class="nav-item px-3">
            <button class="btn btn-primary" @onclick="AddNewPost">Add New Post</button>
        </div>
    </nav>
</div>

@code {

    private List<BlogPost> blogPosts;

    protected override async Task OnInitializedAsync()
    {
        blogPosts = await BlogRepository.GetPostsAsync();
        BlogStateService.OnStateChanged += async () =>
        {
            blogPosts = await BlogRepository.GetPostsAsync();
            InvokeAsync(StateHasChanged);
        };
    }

    private async Task AddNewPost(MouseEventArgs e)
    {
        await BlogRepository.AddPostAsync(new BlogPost { Title = $"Post {blogPosts.Count + 1}", Content = $"This is post {blogPosts.Count + 1}" });
    }

    public void Dispose()
    {
        BlogStateService.OnStateChanged -= () =>
        {
            InvokeAsync(StateHasChanged);
        };
    }
}
